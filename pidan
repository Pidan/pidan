#!/bin/bash
#
# Pidan - Initial .gitiginore file for your project
# Should work on sh, dash, bash, ksh, zsh
#
# Copyright (C) 2023-present, Implemented by Bin Hua <code@tourcoder.com>

# define some links
gitignore_hub_url="https://raw.githubusercontent.com/Pidan/gitignore/main/"

# color
green(){
    echo -e "\033[32m\033[01m$1\033[0m"
}

red(){
    echo -e "\033[31m\033[01m$1\033[0m"
}

yellow(){
    echo -e "\033[33m\033[01m$1\033[0m"
}

white(){
    echo -e "\033[37m\033[01m$1\033[0m"
}

# local version
function local_version() {
    echo "v0.1.1"
}

# remote version on GitHub
function remote_version() {
    curl -s "https://api.github.com/repos/Pidan/pidan/releases" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | awk 'NR==1'
}

# get os
function init_os {
    curl -sL https://api.github.com/repos/Pidan/gitignore/contents/os | grep -o '"name": "[^"]*' | awk -F': "' '{print $2}' | sed -e 's/.gitignore//'
}

# get language
function init_language {
    curl -sL https://api.github.com/repos/Pidan/gitignore/contents/language | grep -o '"name": "[^"]*' | awk -F': "' '{print $2}' | sed -e 's/.gitignore//'
}

# get framework
function init_framework {
    curl -sL https://api.github.com/repos/Pidan/gitignore/contents/framework | grep -o '"name": "[^"]*' | awk -F': "' '{print $2}' | sed -e 's/.gitignore//'
}

# get IDE
function init_ide {
    curl -sL https://api.github.com/repos/Pidan/gitignore/contents/ide | grep -o '"name": "[^"]*' | awk -F': "' '{print $2}' | sed -e 's/.gitignore//'
}

# get gitignore file
function get_gitignore {
    curl -sL "${gitignore_hub_url}${1}/${2}.gitignore" >> gitignore.pidan
}

# script install
function script_install() {
    sudo curl -sL https://raw.githubusercontent.com/Pidan/pidan/master/pidan -o /usr/local/bin/pidan
    if [ $? -ne 0 ]; then
        red "Pidan install failed, please try again."
        exit 1
    fi
    sudo chmod +x /usr/local/bin/pidan
    if [ $? -ne 0 ]; then
        red "Pidan install failed, please try again."
        exit 1
    fi
}

# info command
function show_info() {
    echo ""
    echo "Pidan ($(local_version))"
    echo ""
    echo "Usage: pidan <command>"
    echo "Commands:"
    echo "  init      Initialize gitignore file"
    echo "  upgrade   Check for script upgrade and install the latest version"
    echo "  info      Show all information about Pidan"
}

# check upgrade
function check_upgrade() {
    echo "Checking for Pidan upgrade..."
    echo "local version: $(local_version)"
    echo "latest version: $(remote_version)"
    # check if the script is up to date
    if [ $(remote_version) == $(local_version) ]; then
        green "Pidan is already up to date."
    else
        echo "Pidan Local version: $(local_version)"
        echo "Pidan Latest version: $(remote_version)"
        read -p "Do you want to upgrade? (y/N): " answer
        if [[ "${answer}" == "Y" ]] || [[ "${answer}" == "y" ]] || [[ "${answer}" == "" ]]; then
            echo "Updating..."
            script_install
            green "Pidan is already up to date." && exit 0
        else
            red "Pidan upgrade cancelled" && exit 1
        fi
    fi
}

# initialize gitignore file
function init_gitignore() {
    # check if the .gitignore file exists
    # if [ -f ".gitignore" ]; then
    #     echo ".gitignore file already exists."
    #     exit 1
    # else
        echo "Initializing gitignore file"
        echo "============================="
        # Step 1, Choose your OS
        os_list=($(init_os))
        PS3="Enter the number corresponding to your choice: "
        select os in "${os_list[@]}"; do
        if [[ -n $os ]]; then
            get_gitignore "os" "$os"
            green "OS gitignore file appended."
            break
        else
            red "Invalid option. Please try again."
        fi
        done

        # Step 2, Choose your language
        echo "------------------------"
        lang_list=($(init_language))
        PS3="Enter the number corresponding to your choice: "
        select lang in "${lang_list[@]}"; do
        if [[ -n $lang ]]; then
            get_gitignore "language" "$lang"
            green "Language gitignore file appended."
            break
        else
            red "Invalid option. Please try again."
        fi
        done

        # Step 3, Choose your framework
        echo "------------------------"
        framework_list=($(init_framework))
        PS3="Enter the number corresponding to your choice: "
        select framework in "${framework_list[@]}"; do
        if [[ -n $framework ]]; then
            get_gitignore "framework" "$framework"
            green "Framework gitignore file appended."
            break
        else
            red "Invalid option. Please try again."
        fi
        done

        # Step 4, Choose your IDE
        echo "------------------------"
        ide_list=($(init_ide))
        PS3="Enter the number corresponding to your choice: "
        select ide in "${ide_list[@]}"; do
        if [[ -n $ide ]]; then
            get_gitignore "ide" "$ide"
            green "IDE gitignore file appended."
            break
        else
            red "Invalid option. Please try again."
        fi
        done

        # Step 5, Comfirm
        echo "------------------------"
        echo "Summary of your selections:"
        echo "Operating System: $os"
        echo "Programming Language: $lang"
        echo "Framework: $framework"
        echo "IDE: $ide"
        read -p "Confirm initialization? (Y/n) " confirm

        if [ "$confirm" == "n" ]; then
            rm gitignore.pidan
            echo ""
            red "Invalid option. Please try again."
        else
            cat gitignore.pidan >> .gitignore
            rm gitignore.pidan
            echo ""
            green "Initialization successful."
        fi
        echo "============================="

    # fi
}

main(){
  if  [[ $(command -v pidan) ]]; then
    # Handling command parameters
    case "$1" in
        "init") init_gitignore ;;
        "upgrade") check_upgrade ;;
        "info") show_info ;;
        *) show_info ;;
    esac
  else
    script_install
    green "Pidan installed, just run 'pidan info'" && exit 1
  fi
}

main $1